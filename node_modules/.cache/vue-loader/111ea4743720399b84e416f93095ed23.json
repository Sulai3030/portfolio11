{"remainingRequest":"/Users/Sully/portfolio11/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Sully/portfolio11/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Sully/portfolio11/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Sully/portfolio11/src/views/all-home-version/StartUp.vue?vue&type=template&id=220f341e&","dependencies":[{"path":"/Users/Sully/portfolio11/src/views/all-home-version/StartUp.vue","mtime":1649367387519},{"path":"/Users/Sully/portfolio11/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Sully/portfolio11/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Sully/portfolio11/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Sully/portfolio11/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}