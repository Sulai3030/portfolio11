{"remainingRequest":"/Users/Sully/portfolio11/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Sully/portfolio11/src/views/blog/BlogDetails.vue?vue&type=template&id=50127bcd&","dependencies":[{"path":"/Users/Sully/portfolio11/src/views/blog/BlogDetails.vue","mtime":1649367387520},{"path":"/Users/Sully/portfolio11/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Sully/portfolio11/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Sully/portfolio11/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Sully/portfolio11/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}